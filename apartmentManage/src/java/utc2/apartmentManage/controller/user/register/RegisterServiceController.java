package java.utc2.apartmentManage.controller.user.register;

import utc2.apartmentManage.model.Resident;
import utc2.apartmentManage.model.Service;
import utc2.apartmentManage.repository.manager.serviceRepository;
import utc2.apartmentManage.service.implement.user.infoIMP;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.List;

public class RegisterServiceController {
    private JTable table1, table2;
    private int resID;
    private JTextField searchField;
    private final serviceRepository serviceRepo = new serviceRepository();
    private final infoIMP infoService = new infoIMP();

    public RegisterServiceController(JTable table1, JTable table2, JTextField searchField, int accountID) {
        this.table1 = table1;
        this.table2 = table2;
        this.searchField = searchField;
        Resident res = infoService.getResidentByAccountID(accountID);
        this.resID = res.getResidentID();
        
        searchField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                searchTable();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                searchTable();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                searchTable();
            }
        });

        initTableModel();   // ƒê·∫£m b·∫£o c√≥ model
        placeHolder();
        setupTable1();
        setupClickEvents();
    }

    private void initTableModel() {
        // Table1: D·ªãch v·ª• c√≥ th·ªÉ ƒëƒÉng k√Ω
        DefaultTableModel model1 = new DefaultTableModel(
                new Object[]{"T√™n DV", "Lo·∫°i", "Gi√°", "ƒê∆°n v·ªã", "M√¥ t·∫£", "Thao t√°c"}, 0
        );
        table1.setModel(model1);

        // Table2: D·ªãch v·ª• ƒë√£ ƒëƒÉng k√Ω
        DefaultTableModel model2 = new DefaultTableModel(
                new Object[]{"T√™n DV", "Gi√°", "ƒê∆°n v·ªã", "Thao t√°c"}, 0
        );
        table2.setModel(model2);
    }

    public void setupTable1() {
        List<Service> services = serviceRepo.getPersonalServices();
        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        model.setRowCount(0);

        for (Service ser : services) {
            model.addRow(new Object[]{
                    ser.getServiceName(),
                    ser.getServiceType(),
                    ser.getPrice(),
                    ser.getUnit(),
                    ser.getDescription(),
                    "ƒêƒÉng k√Ω"
            });
        }

        setFont(table1);
        setFont(table2);

        // G√°n renderer + editor cho c·ªôt "Thao t√°c"
        table1.getColumn("Thao t√°c").setCellRenderer(new ButtonRenderer());
        table1.getColumn("Thao t√°c").setCellEditor(new ButtonEditor(new JCheckBox(), rowIndex -> {
            DefaultTableModel model1 = (DefaultTableModel) table1.getModel();
            DefaultTableModel model2 = (DefaultTableModel) table2.getModel();

            String serviceName = (String) model1.getValueAt(rowIndex, 0);
            Object price = model1.getValueAt(rowIndex, 2);
            String unit = (String) model1.getValueAt(rowIndex, 3);

            boolean exists = false;
            for (int i = 0; i < model2.getRowCount(); i++) {
                if (serviceName.equals(model2.getValueAt(i, 0))) {
                    exists = true;
                    break;
                }
            }

            if (!exists) {
                // ‚úÖ L·∫•y service_id t·ª´ t√™n
                Integer serviceID = serviceRepo.getServiceIdByName(serviceName);
                if (serviceID != null) {
                    boolean success = serviceRepo.registerService(resID, serviceID);
                    if (success) {
                        model2.addRow(new Object[]{serviceName, price, unit, "H·ªßy ƒëƒÉng k√Ω"});
                        model1.setValueAt("ƒê√£ ƒëƒÉng k√Ω", rowIndex, 5);
                    } else {
                        JOptionPane.showMessageDialog(null, "L·ªói khi ƒëƒÉng k√Ω d·ªãch v·ª•.", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Kh√¥ng t√¨m th·∫•y ID d·ªãch v·ª•!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // ‚úÖ TH√äM D√íNG N√ÄY
                JOptionPane.showMessageDialog(null, "D·ªãch v·ª• n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
            }
        }));
    }

    private void setupClickEvents() {
        // ƒê·∫∑t n√∫t cho table2 n·∫øu b·∫°n mu·ªën x·ª≠ l√Ω h·ªßy ƒëƒÉng k√Ω sau n√†y
        table2.getColumn("Thao t√°c").setCellRenderer(new ButtonRenderer());
        table2.getColumn("Thao t√°c").setCellEditor(new ButtonEditor(new JCheckBox(), rowIndex -> {

            DefaultTableModel model2 = (DefaultTableModel) table2.getModel();
            String serviceName = (String) model2.getValueAt(rowIndex, 0);

            // üîé L·∫•y service_id t·ª´ t√™n
            Integer serviceID = serviceRepo.getServiceIdByName(serviceName);
            if (serviceID != null) {
                boolean success = serviceRepo.unregisterService(resID, serviceID);
                if (success) {
                    model2.removeRow(rowIndex);

                    // c·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i ·ªü table1 v·ªÅ "ƒêƒÉng k√Ω"
                    DefaultTableModel model1 = (DefaultTableModel) table1.getModel();
                    for (int i = 0; i < model1.getRowCount(); i++) {
                        if (model1.getValueAt(i, 0).equals(serviceName)) {
                            model1.setValueAt("ƒêƒÉng k√Ω", i, 5);
                            break;
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "L·ªói khi h·ªßy ƒëƒÉng k√Ω d·ªãch v·ª•.", "L·ªói", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Kh√¥ng t√¨m th·∫•y ID d·ªãch v·ª•!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }));
    }

    public void setFont(JTable table) {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 14));

        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        ((DefaultTableCellRenderer) header.getDefaultRenderer())
                .setHorizontalAlignment(SwingConstants.CENTER);
    }
    
    private void placeHolder() {
        searchField.setForeground(java.awt.Color.GRAY);
        searchField.setText("Nh·∫≠p t√™n d·ªãch v·ª•...");
        searchField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent evt) {
                if (searchField.getText().equals("Nh·∫≠p t√™n d·ªãch v·ª•...")) {
                    searchField.setText("");
                    searchField.setForeground(java.awt.Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent evt) {
                if (searchField.getText().isEmpty()) {
                    searchField.setForeground(java.awt.Color.GRAY);
                    searchField.setText("Nh·∫≠p t√™n d·ªãch v·ª•...");
                }
            }
        });
    }
    
    private void searchTable() {
        String text = searchField.getText().trim();

        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table1.setRowSorter(sorter);

        if (text.isEmpty() || text.equals("Nh·∫≠p t√™n d·ªãch v·ª•...")) {
            sorter.setRowFilter(null); // kh√¥ng l·ªçc g√¨
        } else {
            RowFilter<DefaultTableModel, Object> idFilter = RowFilter.regexFilter("(?i)" + text, 0); // l·ªçc c·ªôt t√™n

            // K·∫øt h·ª£p 2 b·ªô l·ªçc b·∫±ng OR (ch·ªâ c·∫ßn kh·ªõp 1 trong 2 c·ªôt)
            RowFilter<DefaultTableModel, Object> combinedFilter = RowFilter.orFilter(java.util.Arrays.asList(idFilter));
            sorter.setRowFilter(combinedFilter);
        }
    }
}
